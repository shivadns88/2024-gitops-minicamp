name: 'Destroy'
on: workflow_dispatch

permissions:
  contents: read
  id-token: write
  
# environment has to be necessarily defined
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:

    - name: Configure AWS Credentials for China region audience
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        role-to-assume: ${{ secrets.ASSUMED_ROLE }}    
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    # We comment out with: below as that is required only for terraform cloud
    # Default below is v1 and we are using v3
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3


    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    # If the directory in which terraform needs to be init is different, use terraform -chdir="./terraform" init
    # -chdir=DIR is a global option to run the command in the correct directory
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    #While debugging and testing things, it is good to comment out terraform fmt to reduce amount of time spent on debugging
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan -destroy
      run: terraform plan -destroy -input=false

    # Apply the configuration
    - name: Terraform Destroy
      run: terraform destroy -auto-approve -input=false